#LyX 1.6.9 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass extarticle
\use_default_options true
\language english
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize 12
\spacing onehalf
\use_hyperref false
\papersize a4paper
\use_geometry false
\use_amsmath 1
\use_esint 1
\cite_engine natbib_authoryear
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Title
Automated OpenAjax Hub Widget Generation for Deep Web Surfacing
\end_layout

\begin_layout Author
Karli Kirsim√§e
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
thispagestyle{empty}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Deep Web Surfacing
\end_layout

\begin_layout Standard
Blah-blah
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Related Work
\end_layout

\begin_layout Standard
Blah
\end_layout

\begin_layout Subsection
Some other related work
\end_layout

\begin_layout Standard
Blahblahblah
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Automated OpenAjax Hub Widget Generation
\end_layout

\begin_layout Standard
The proposed solution for automated widget generation is divided in two
 parts:
\end_layout

\begin_layout Enumerate
the client side for creating javascript proxies
\end_layout

\begin_layout Enumerate
and the server side for proxying to the actual service and generating required
 metadata for the creation of client side proxy
\end_layout

\begin_layout Standard
To generate a new widget, an URL for the WSDL must be provided along with
 the name of the operation that the generated widget proxies.
 Each widget can proxy only one operation from one WSDL, but the same mechanism
 enables to generate many widgets that can all be used in one application.
 One application can use only one widget for a unique combination of WSDL
 URL and operation name.
 The uniqueness of the definition itself is not checked, therefore it is
 still possible to generate more than one proxy for the same SOAP endpoint
 by simply using different WSDL locations.
\end_layout

\begin_layout Standard
The generations starts on the client side, that triggers the initialization
 of a new JavaScript proxy for a certain SOAP operation.
 A unique topic name is used to register the generated widget in OpenAjax
 Hub.
 Client side then delegates to the TransformerWidget, that asks the server
 for the definitions of the mappings for the generated proxy.
 Server generates the mappings and sends them to the transformer widget.
 When mappings also specified the location of a JSON Schema, that describes
 the expected input for the widget, then this is also loaded from the server
 by the TransformerWidget.
 After that the proxy is ready to be called.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Flow diagram of the generation of SOAP proxy widget
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Implementation of the client side
\end_layout

\begin_layout Standard
On the client side there are many different JavaScript libraries and components
 used to create the desired solution.
 The most important of them are:
\end_layout

\begin_layout Enumerate
OpenAjax Hub - a JavaScript framework that enables event based communication
 between JavaScript components.
 It uses publish-subscribe architecture to delegate messages between the
 components.
 
\end_layout

\begin_layout Enumerate
Transformer Widget - an OpenAjax Hub widget that is developed using Google
 Web Toolkit (GWT).
 Transformer Widget takes care of the semantic integration between diferent
 OpenAjax Hub widgets.
 
\end_layout

\begin_layout Enumerate
Service Mapping Description (or Simple Method Description, abbreviated as
 SMD) - a JSON formatted description of web services.
\end_layout

\begin_layout Enumerate
Dojo - a JavaScript library that has modules for automatic JavaScript proxy
 generation based on SMD documents.
\end_layout

\begin_layout Enumerate
JSON-RPC - a remote procedure control protocol that uses JSON as a data
 format.
\end_layout

\begin_layout Enumerate
JSON
\end_layout

\begin_layout Enumerate
JSONP
\end_layout

\begin_layout Standard
A client side applications that wants to use the widget generation system
 must meet specific requirements.
 Before loading the application, the location of TransformerWidget and Soap
 Proxy widget must be specified.
 The Soap Proxy widget must be served from the same root url as the soap
 proxy server side component.
 In addition to widget locations, an implementation of an OpenAjax Hub specifica
tion must be included to the page and on page load event the hub must be
 initialized.
 When the hub has been initialized then the TransformerWidget has to be
 registered to the hub.
 Also the SoapServiceUtils.js javascript file has to be included to the page.
 This file includes a function generateWidget that is used to generate a
 new soap proxy widget.
 This function assumes that the previously initialized hub can be referred
 to by the global variable 
\begin_inset Quotes eld
\end_inset

managedHub
\begin_inset Quotes erd
\end_inset

.
 The function is called by passing in four arguments - wsdl uri, operation
 name, the location of the Soap Proxy widget html page and the array of
 existing proxy widgets.
 
\end_layout

\begin_layout Standard
When the function generateWidget is called, it makes sure that there is
 no existing widget for the same wsdl and operation.
 Then it registers the new widget in the initialized hub instance.
 Although all the generated proxy widgets use the same html and javascript
 files, their state is still unique.
 The state of the widget is controlled by appending wsdl and operation name
 parameters to the Soap Proxt widget URL.
 Those parameters are once again extracted from the from the url of the
 widget when the hub initialized the widget.
 The root URL of the server side proxy component is also extracted from
 the URL of the widget.
 This is possible because the widget and server side component must be served
 from the same location.
 Locations of two important services can be constructed by using the root
 URL.
 These are locations for getting the mappings for the freshly added widget
 and for getting the SMD document that is used by Dojo to generate the actual
 proxy.
 
\end_layout

\begin_layout Standard
If the proxy widget is successfully connected to the OpenAjax Hub, there
 are a few actions that need to be carried out.
 Firstly the proxy widget publishes a message to the hub with a topic 
\begin_inset Quotes eld
\end_inset

ee.stacc.transformer.mapping.add.url
\begin_inset Quotes erd
\end_inset

 and using the url of the service for getting the TransformerWidget mapping.
 This is a special topic that TransformerWidget listens to add new mappings
 to its internal repository.
 When TransformerWidget receives this message, it loads the mappings from
 the given URL and adds them.
 Internally it also checks for the schema location of each frame in the
 mappings document.
 In mappings document that is generated by the soap proxy server side, there
 is a schema defined for the input frame.
 This schema is also loaded by the TransformerWidget and persisted internally
 for later use.
 
\end_layout

\begin_layout Standard
The widget also subscribes itself for a unique kind of messages that are
 meant for that exact widget.
 The topic that it uses is generated by appending the sanitized wsdl uri
 (all the special characters are replaced by a dash as by the suggestion
 from OpenAjax Hub to not use special chars in topic names) and the operation
 name.
 This should guarantee that each proxy is subscribing to a unique topic
 name.
 When subscibing to the topic, the widget also specifies a callback method,
 that is used when it receives a message with that topic.
 
\end_layout

\begin_layout Standard
If TransformerWidget receives a message with data that can be transformed
 to the format that the soap proxy widget expects, it does the transformation
 and publishes the data with the topic that the proxy widget subscribed
 to.
\end_layout

\begin_layout Subsection
Implementation of the server side
\end_layout

\end_body
\end_document
